package com.example.project1.ui

import androidx.compose.foundation.*
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Close
import androidx.compose.material.icons.filled.Favorite
import androidx.compose.material.icons.filled.FavoriteBorder
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.runtime.setValue
import androidx.compose.ui.*
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.*
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.*
import coil3.compose.AsyncImage
import androidx.navigation.NavHostController
import com.example.project1.R
import com.example.project1.model.CafeInfo
import com.example.project1.model.PromptRequest
import com.example.project1.model.User
import com.example.project1.network.RetrofitClient
import com.example.project1.utils.getToken
import kotlinx.coroutines.launch

@Composable
fun CafeDetailScreen(
    navController: NavHostController,
    cafeInfo: CafeInfo
) {
    val token = getToken(LocalContext.current)

    var selectedTab by remember { mutableStateOf(0) }
    var isLiked by remember { mutableStateOf(false) }
    LaunchedEffect(Unit) {
        isLiked = RetrofitClient.apiService.isFollowingCafe(cafeInfo.cid, token)
    }

    val coroutineScope = rememberCoroutineScope()

    val hashtagPrompt =
        """
            ÌòÑÏû¨ Ïπ¥ÌéòÏóê ÎåÄÌïú Ìï¥ÏãúÌÉúÍ∑∏Î•º 4Í∞ú ÏûëÏÑ±Ìï¥ Ï§ò.
            Ïπ¥Ìéò Ïù¥Î¶ÑÏùÄ Îã§ÏùåÍ≥º Í∞ôÏïÑ : $cafeInfo.name 
            ** ÎãµÎ≥ÄÏùò ÌòïÏãùÏùÄ Î¨¥Ï°∞Í±¥ "#Ìï¥ÏãúÌÉúÍ∑∏1 #Ìï¥ÏãúÌÉúÍ∑∏2\n#Ìï¥ÏãúÌÉúÍ∑∏3 #Ìï¥ÏãúÌÉúÍ∑∏4"Ïùò ÌòïÏãùÏúºÎ°ú ÏûëÏÑ±Ìï¥Ïïº Ìï¥.**
            Îã§ÏùåÏùÄ Í∞ÄÎä•Ìïú Ìï¥ÏãúÌÉúÍ∑∏Îì§Ïùò ÏòàÏãúÏïº : #Í≥µÎ∂ÄÌïòÍ∏∞ Ï¢ãÏùÄ #Ïπ¥Ïù¥Ïä§Ìä∏ ÎèÑÎ≥¥ 10Î∂Ñ #ÏùòÏûêÍ∞Ä Ìé∏Ìïú #Î©îÎâ¥Í∞Ä ÎßõÏûàÎäî Îì±...
        """
    var hashTagResult by remember { mutableStateOf("") }
    LaunchedEffect(Unit) {
        coroutineScope.launch {
            RetrofitClient.apiService.getHashTags(PromptRequest(hashtagPrompt))
        }
    }

    Box(
        modifier = Modifier
            .fillMaxSize()
            .background(Color.Black)
    ) {
        AsyncImage(
            model = cafeInfo.imageURL,
            contentDescription = null,
            modifier = Modifier.fillMaxSize(),
            contentScale = ContentScale.Crop
        )

        Box(
            modifier = Modifier
                .fillMaxSize()
                .background(
                    brush = Brush.verticalGradient(
                        listOf(Color.Transparent, Color(0xFF4E342E))
                    )
                )
        )

        Column(modifier = Modifier.fillMaxSize().padding(24.dp)) {
            Row(modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.SpaceBetween) {
                Icon(Icons.Default.Close, contentDescription = "Îã´Í∏∞", tint = Color.White,
                    modifier = Modifier.size(32.dp).clickable { navController.popBackStack() })
                Icon(
                    imageVector = if (isLiked) Icons.Default.Favorite else Icons.Default.FavoriteBorder,
                    contentDescription = "Like",
                    tint = if (isLiked) Color.Red else Color.White,
                    modifier = Modifier
                        .size(32.dp)
                        .clickable {
                            isLiked = true
                            coroutineScope.launch {
                                RetrofitClient.apiService.followCafe(cafeInfo.cid, token)
                            }
                        }
                )
            }

            Spacer(modifier = Modifier.height(100.dp))

            Text(cafeInfo.name, fontSize = 22.sp, color = Color.White, fontWeight = FontWeight.Bold)
            Spacer(modifier = Modifier.height(8.dp))
            Text(
                if (hashTagResult.isNotEmpty()) hashTagResult else "",
                color = Color.White, fontSize = 14.sp)
            Spacer(modifier = Modifier.height(36.dp))

            Row(modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.SpaceEvenly) {
                listOf("ÏúÑÏπò Î≥¥Í∏∞", "Ïπ¥Ìéò Ï†ïÎ≥¥", "Í¥ÄÎ†® Ïπ¥Ìéò").forEachIndexed { index, label ->
                    Button(
                        onClick = { selectedTab = index },
                        colors = ButtonDefaults.buttonColors(
                            containerColor = if (selectedTab == index) Color(0xFF4E342E) else Color(0x554E342E),
                            contentColor = Color.White
                        ),
                        shape = RoundedCornerShape(8.dp)
                    ) { Text(label) }
                }
            }

            Spacer(modifier = Modifier.height(16.dp))

            Box(
                modifier = Modifier
                    .fillMaxWidth()
                    .weight(1f)
                    .background(Color.Black.copy(alpha = 0.6f))
                    .padding(16.dp)
            ) {
                when (selectedTab) {
                    0 -> LocationView(cafeInfo.shortAddress)
                    1 -> CafeInformation(cafeInfo.cafeIntroduce)
                    2 -> RelatedCafeView(navController, cafeInfo.name)
                }
            }
        }
    }
}

@Composable
fun LocationView(location: String) {
    Column {
        Text("üìç ÏúÑÏπò Ï†ïÎ≥¥", color = Color.White, fontWeight = FontWeight.Bold)
        Spacer(modifier = Modifier.height(8.dp))
        Text(location, color = Color.White)
        Text("ÏòÅÏóÖ Ï¢ÖÎ£å 11:00Ïóê ÏòÅÏóÖ ÏãúÏûë", color = Color.White)
        Spacer(modifier = Modifier.height(8.dp))
        Image(
            painter = painterResource(id = R.drawable.navermap_sample),
            contentDescription = null,
            modifier = Modifier
                .fillMaxWidth()
                .height(150.dp),
            contentScale = ContentScale.Crop
        )
    }
}

@Composable
fun CafeInformation(information: String) {
    Column {
        Text("‚òïÔ∏è Ïπ¥Ìéò Ï†ïÎ≥¥:", fontWeight = FontWeight.Bold, fontSize = 18.sp, color = Color.White)
        Spacer(modifier = Modifier.height(16.dp))

        Text(
            text = information,
            color = Color.White,
            fontSize = 14.sp,
            lineHeight = 22.sp,
            modifier = Modifier
                .fillMaxWidth()
                .padding(4.dp)
        )
    }
}

@Composable
fun RelatedCafeView(navController: NavHostController, name: String) {

    var promptResult by remember { mutableStateOf<List<CafeInfo>?>(null) }
    val prompt =
        """
               ÏÇ¨Ïö©ÏûêÏùò Ï°∞Í±¥ÏùÄ Îã§ÏùåÍ≥º Í∞ôÏïÑ.
               - ÎÇ¥Í∞Ä Ï∞æÏúºÎ†§Îäî Ïπ¥ÌéòÎäî : ÎÑ§Ïù¥Î≤Ñ ÏßÄÎèÑ ÏÉÅÏóêÏÑú $name Í≥º Í∞ÄÍπåÏö¥ Ïπ¥ÌéòÏó¨Ïïº Ìï¥.
               - ÎÇ¥Í∞Ä Ï∞æÏúºÎ†§Îäî Ïπ¥ÌéòÎäî : $name Í≥º Í¥ÄÎ†®Ïù¥ ÏûàÎäî Ïπ¥ÌéòÏó¨Ïïº Ìï¥.
               
               Ï°∞Í±¥Ïóê ÎßûÎäî Ïπ¥Ìéò ÏÉÅÏúÑ 15Í∞úÎ•º Ï∂îÏ≤úÌï¥ Ï§ò.
               **ÎãµÎ≥ÄÏùÄ Î¨¥Ï°∞Í±¥ ÎÑ§Ïù¥Î≤Ñ ÏßÄÎèÑ ÏÉÅÏóê Ïã§Ï†ú Ï°¥Ïû¨ÌïòÎäî Ïπ¥Ìéò ÏÉÅÌò∏Î™ÖÏùÑ Í∏∞Ï§ÄÏúºÎ°ú,
               "Ïù¥Î¶Ñ1, Ïù¥Î¶Ñ2, Ïù¥Î¶Ñ3, Ïù¥Î¶Ñ4, ..." ÏôÄ Í∞ôÏùÄ ÌòïÏãùÏúºÎ°ú Ï∂úÎ†•Ìï¥ Ï§ò.**
        """

    val coroutineScope = rememberCoroutineScope()
    LaunchedEffect(Unit) {
        coroutineScope.launch {
            promptResult = RetrofitClient.apiService.recommendCafes(PromptRequest(prompt))
        }
    }

    Column {
        Text("ü§ç Í¥ÄÎ†® Ïπ¥Ìéò:", fontWeight = FontWeight.Bold, fontSize = 18.sp, color = Color.White)
        Text("ÎπÑÏä∑Ìïú Ïπ¥Ìéò ÏûÖÎãàÎã§.", color = Color.White)
        Spacer(modifier = Modifier.height(16.dp))

        val similarCafes = promptResult!!

        similarCafes.forEach {cafe ->
            Card(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(vertical = 8.dp)
                    .clickable {
                        navController.navigate("CafeDetail")
                    },
                shape = RoundedCornerShape(16.dp),
                colors = CardDefaults.cardColors(containerColor = Color(0xAA4E342E))
            ) {
                Row(modifier = Modifier.padding(12.dp)) {
                    AsyncImage(
                        model = cafe.imageURL,
                        contentDescription = null,
                        modifier = Modifier
                            .size(80.dp)
                            .clip(RoundedCornerShape(12.dp)),
                        contentScale = ContentScale.Crop
                    )
                    Spacer(modifier = Modifier.width(12.dp))
                    Column {
                        Text(cafe.name, fontWeight = FontWeight.Bold, color = Color.White)
                        Text(cafe.shortAddress, color = Color.White)
                    }
                }
            }
        }
    }
}

